# new style conf file

# root dir for relative file paths
confdir /etc/go-tunnel

# log /path/to/file INFO
log STDOUT DEBUG

# depriv ourselves
uid nobody gid nobody

# Remote server handling SOCKS-over-Quic with support for
# UDP over socks
listen quic eth0:4330 CERT-A timeout TIMEOUT-A
        ratelimit RL-A
        connect SOCKS udp-advertise eth0:4000-6000

# local server pretending to be a SOCKS server but
# tunneling SOCKS over quic; the SOCKS proto is
# terminated on the remote server above.
listen tcp 127.0.0.1:2080 timeout TIMEOUT-A
        ratelimit RL-B
        connect quic server.name:4330 CERT-B

# reverse-tls-proxy on a server that uses client auth
# and use proxy-proto v2 to signal client info to
# downstream servers
listen tls eth0:443 pki CERT-X timeout TIMEOUT-X
        ratelimit RL-X
        connect downstream.name:8080 proxy-proto v2

# listen on local UDP and tunnel datagrams over quic
# to a remote server
listen udp { eth0:9000 eth1:9000 }
        ratelimit RL-Z timeout TIMEOUT-Z
        connect quic remote.name:4000 pki CERT-Z

# listen on quic socket and handle datagrams to a
# downstream connection
listen quic :4000 pki CERT-Z 
        ratelimit RL-Z timeout TIMEOUT-Z
        connect udp downstream.name:2000 

timeout TIMEOUT-A connect 2s
               read 3s
               write 4s

ratelimit RL-A 200 per-ip 10 cache 3000


acl ACL-A allow { 127.0.0.1/8, 11.0.1.0/24, 11.0.2.0/24 }
          deny  { }


# presence of client-ca implies that this pki config requires
# client-ca
pki CERT-A cert /path/to/xyz
           key /path/to/key
           ca /path/to/ca
           client-ca /path/to/client-ca

pki CERT-B cert /path/to/abc.crt
           key /path/to/def.key
           ca /path/to/ca.crt

# in the future
#pki CERT-AUTO auto-cert auto-cert-config
